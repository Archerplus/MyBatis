单个参数:mybatis不会做特殊处理
	#{参数名}:取出参数值

多个参数:mybatis会做特殊处理.
		多个参数会被封装成一个map
		key:param1...paramN或者参数的索引也可以
		value:传入的参数值
		#{}就是从map中获取指定的key值
异常
org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  
Cause: org.apache.ibatis.binding.BindingException: 
Parameter 'id' not found. 
Available parameters are [arg1, arg0, param1, param2]
操作:
	方法:public Employee getEmpByIdAndLastName(Integer id, String lastName);
	取值:#{id},#{lastName}

命名参数:明确的指出，封装参数时map的key:param("id")
	多个参数会被封装成一个map
		key:使用@Param注解指定的值
		value:参数值
	#{指定的key}取出参数值
	
POJO
如果多个参数正好是业务逻辑的数据模型，我们就可以直接传入pojo;
	#{属性名}:取出传入的pojo的属性值

Map
如果多个参数不是业务模型中的数据,没有对应的pojo,不经常使用,为了方便,我们也可以直接传入map
	#{key}:取出map中对应的值
	
TO:
如果多个参数不是业务模型中的数据,但是经常使用,推荐来编写一个TO(transfer object)数据传输对象
page{
	int index;
	int size;
}

===================================思考=====================================
public Employee getEmp(@Param("id")Integer id,String lastName);
	取值:id==>{id/param1}     lastName==>#{param2}
	
public Employee getEmp(Integer id,@Param("e")Employee emp);
	取值:id==>{param1}     lastName==>#{e.lastName/param2.lastName}


##特别注意:如果是Collection(List,Set)类型或者数组,也会特殊处理,
		也是把传入的list或者数组封装在map中
		key:Collection(collection),如果是list还可以使用这个key(list)
			数组(array)
public Employee getEmpById(List<Integer> ids);
	取值:取出第一个id值:#{list[0]}
	
==================================结合源码,mybatis如何处理这个参数
	
	
	
	
	
	
================================参数值的获取==============================	
	#{}:可以获取map中的值或者pojo对象属性的值
	${}:可以获取map中的值或者pojo对象属性的值
	
	select * from employee where id=${id} and last_name=#{lastName}
	prepareing:select * from employee id=2 and last_name=?
	
	区别:
		#{}:是以预编译的形式,将参数设置到sql语句中,PreparingStatement:防止SQL注入
		${}:取出的值直接拼装在sql语句中,会有安全问题
	
	大多数情况下,我们取参数都应该使用#{}
		
		原生JDBC不支持占位符的地方我们就可以使用${}进行取值
		比如分表.排序....:按照年份分表拆分
			select * from ${year}_salary where xxx;
			select * from employee order by ${f_name} ${order};
	
	#{]:更丰富的用法
		规定参数的一些规则
		javaType.jdbcType.mode(存储过程).numericScale
		resultMap.typeHandler.jdbcTypeName.expression(未来准备支持的功能)
	
		jdbcType通常需要在某种特定的条件下被设置:
			在我们的数据为Null的时候,有些数据可能不能识别mybatis对null的特殊处理.比如Oracle(报错)
			jdbcType other:无效的类型;因为mybatis对所有的null值都映射的原生jdbc的other类型,oracle不能正确处理
			jdbcType=null
	
		由于全局配置中:jdbcTypeForNull=OTHER;oracle不支持;两种解决方法都行
		1.#{email,jdbcType=OTHER}
		2.jdbcTypeForNull=NULL
		
		为所有的null类型的数据指定为Null类型,因为默认是Other类型的,oracle不能识别,
		而null类型的数据oracle和mysql都能够识别
        <setting name="jdbcTypeForNull" value="NULL" />