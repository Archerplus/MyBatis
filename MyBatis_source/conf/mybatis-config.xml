<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<!-- 1.mybatis可以使用properties来引入properties配置文件中的内容 
		   resource:引入类路径下的资源 
		   url:引入网络路径或磁盘路径下的资源 
	 -->
	<properties resource="dbconfig.properties"></properties>
	<settings>
		<!-- 将mysql中的变量名称从下划线标准转化成驼峰命名标准,从而和javabean中的变量名称相对应 -->
		<!-- <setting name="mapUnderscoreToCamelCase" value="true" /> -->
		
        <!-- 打印查询语句 -->
        <setting name="logImpl" value="STDOUT_LOGGING" />
        <!-- 为所有的null类型的值指定为NULL类型 -->
        <setting name="jdbcTypeForNull" value="NULL" />
        <!-- 显式的指定每个我们需要更改的配置的值，即使是默认的，防止版本更新带来的问题 -->
		<!-- <setting name="lazyLoadingEnabled" value="true"/>
		<setting name="aggressiveLazyLoading" value="false"/> -->
	</settings>
	<!-- 	3.typeAliases. 别名处理器 
			作用:可以为我们的java类型起别名 -->
	<!-- typeAlias:为某个java类型起别名 
		  别名不区分大小写
		 type:指定要起别名的类型的全类名;默认别名就是类名小写;employee 
		 alias:指定一个新的名字 
		 -->
	<typeAliases>
		<!-- 
			1.<typeAlias type="com.atguigu.mybatis.bean.Employee" alias="emp"/> 
		-->
		<!-- 
			2.package:为某个包下的所有类批量起别名
			name:指定包名(为当前包以及下面所有的后代包都起一个默认别名,就是简单的类名小写)
		-->
		<package name="com.atguigu.mybatis.bean"/>
		<!-- 3.批量起别名的情况下,使用@Alias注解为某个类型指定新的别名 -->
	</typeAliases>
	<!-- 
		4.environments:环境们,mybatis可以配置多种环境,使用default来使用切换到某种指定的环境,可以达到快速切换环境的目的
		environment:配置一个具体的环境信息,必须有两个标签;id代表当前环境的唯一标识
		transactionManager:事务管理器
		type:事务管理器的类型;JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)
			自定义事务管理器:实现TransactionFactory接口,然	后type就是这个实现类的全类名
		dataSource:数据源;
		type:数据源类型;UNPOOLED(UnpooledDataSourceFactory)
			|POOLED(PooledDataSourceFactory)
			|JNDI(JndiDataSourceFactory)
			自定义数据源:实现DataSourceFactory接口,type就是全类名
	 -->
	<environments default="dev_mysql">
	<environment id="dev_oracle">
		<transactionManager type="JDBC"></transactionManager>
		<dataSource type="POOLED">
				<property name="driver" value="${orcl.driver}" />
				<property name="url" value="${orcl.url}" />
				<property name="username" value="${orcl.username}" />
				<property name="password" value="${orcl.password}" />
		</dataSource>
	</environment>
	<environment id="dev_mysql">
		<transactionManager type="JDBC" />
		<dataSource type="POOLED">
			<property name="driver" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
		</dataSource>
	</environment>
	</environments>
	<!-- 
		5.databaseIdProvider;支持多种数据库厂商
		type="DB_VENDER":VendorDatabaseIdProvider
		作用就是得到数据库厂商的标识(驱动getDatabaseProductName()),mybatis就能根据数据库厂商标识来执行不同的SQL
	 	MYSQL,Oracle,SQL Server,xxxx
	 -->
	<!-- <databaseIdProvider type="DB_VENDER"> -->
	<!-- 为不同的数据库厂商起别名 -->
		<!-- 
		<property name="MYSQL" value="mysql"/>
		<property name="Oracle" value="oracle"/>
		<property name="SQL Server" value="sqlserver"/>
	</databaseIdProvider> 
	-->
	<!-- 这是一个全局配置文件 -->
	<!-- 将我们写好的sql映射文件一定要注册到全局配置文件中 -->
	<!-- 将sql映射注册到全局配置中 -->
	<mappers>
	<!-- mapper:注册一个sql映射 
		 注册配置文件
		 resource:引用类路径下的sql映射文件 mybatis/mapper/EmployeeMapper.xml
		 url:引用网络或磁盘下的sql映射文件
		 
		 注册接口
		 class:引用(注册)接口，
		 	1.sql映射文件,映射文件名必须和接口同名,并且放在与接口同一目录下
		 	2.没有sql映射文件,所有的sql都是利用注解写在接口上;
		 	推荐:比较重要，复杂的dao接口,我们来写在sql映射文件
		 		不重要，简单的dao接口为了开发方便可以使用注解
	 -->
	 
		<!-- 需要把接口和配置文件放到同一目录下，并且配置文件的文件名必须和接口同名 -->
		<!-- <mapper resource="mybatis/mapper/EmployeeMapper.xml" /> -->
		<!-- <mapper class="com.atguigu.mybatis.dao.EmployeeMapperAnnotation"/> -->
		
		<!-- 批量注册: 
			 1.接口和相应的配置文件必须在同一个包的目录下，才能实现批量注册
			 2.使用注解
		-->
		<package name="com.atguigu.mybatis.dao" />
		<!-- 源码文件夹里面的所有东西都会被合并在类路径下 
			 就是说src和conf里面的所有资源都会合并在bin目录下
			 我们可以继续将接口写在src中,
			 将sql映射文件写在conf中
			 以便我们可以更加清楚直观的将他们进行区别
			 bin目录就叫做类路径的开始
		-->
	</mappers>
	
</configuration>