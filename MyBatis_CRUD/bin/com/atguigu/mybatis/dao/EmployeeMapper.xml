<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 	namespace：名称空间  指定为接口的全类名，将接口和配置文件进行动态绑定
		id:唯一标识 
		resultType:返回值类型 
		#{id}:从传递过来的参数中取出ID值 -->
<mapper namespace="com.atguigu.mybatis.dao.EmployeeMapper"><!-- 接口全类名 -->
		<!-- 	
			id:方法名 
			resultType:返回值类型
		-->
	<select id="getEmpByMap" resultType="emp">
	<!-- select * from ${tableName} where id=${id} and last_name=#{lastName} -->
		select * from ${tableName} where last_name=#{lastName}
	</select>
	
	<select id="getEmpById"
		resultType="emp">
		select * from employee
		where id = #{id}
	</select>
	<!-- databaseId:选择使用的数据库 -->
	<!-- 
	<select id="getEmpById"
		resultType="emp" databaseId="oracle">
		select * from employee
		where id = #{id}
	</select> 
	-->
	
	<!-- public void addEmp(Employee employee); -->
	<!-- parameterType:可以省略
		 mysql支持自增主键,自增主键的值的获取,mybatis也是利用statement.getGeneratedKeys();
	 	 useGeneratedKeys="true";使用自增主键获取主键值策略
	 	 keyProperty:指定对应的主键属性,也就是mybatis获取到主键值之后,将这个值封装给javabean的那个属性
	 -->
	<!-- <insert id="addEmp" parameterType="com.atguigu.mybatis.bean.Employee" 
	useGeneratedKeys="true" keyProperty="id">
		insert into employee(last_name,email,gender) values(#{lastName},#{email},#{gender})  
	</insert> -->
	<insert id="addEmp" parameterType="com.atguigu.mybatis.bean.Employee" >
		insert into employee(last_name,email,gender) values(#{lastName},#{email},#{gender})  
		<!--insert into employee(last_name,email,gender) values(#{lastName,jdbcType=NULL},#{email},#{gender})  
			oracle不能识别mytabis的null,所有要特殊指定这个值的类型jdbcType=NULL
		 -->
	</insert>
	
	
	<!-- public List<Employee> getEmpLikeER(String str); -->
	<select id="getEmpLikeER" resultType="com.atguigu.mybatis.bean.Employee">
		select * from employee where last_name like #{lastName}
	</select>
	
	<!-- public Map<String, Object> getEmpByIdReturnMap(Integer id); -->
	<select id="getEmpByIdReturnMap" resultType="map">
		select * from employee where id = #{id}
	</select>
	
	<!-- public Map<Integer,Employee> getEmpByLastNameLikeReturnMap(String lastName); -->
	<select id="getEmpByLastNameLikeReturnMap" resultType="com.atguigu.mybatis.bean.Employee">
		select * from employee where last_name like #{lastName}
	</select>
	<!-- 
		注意:没有进行实现练习
		Oracle不支持自增;Oracle使用序列来模拟自增
		每次插入的数据的主键是从序列中拿到的值；如何获取到这个值
	 -->
	<insert id="addEmp" databaseId="oracle">
	<!-- keyProperty:查出的主键值封装给javabean的那个属性 -->
	<!-- order="BEFORE":当前sql在插入sql之前运行
			    AFTER:当前sql在插入sql之后运行
		 resultType="":查出的返回值的类型
		 运行顺序:
		 	先运行查询selectKey查询id的sql,查出id值封装给javabean的id属性
		 	再运行插入sql,就可以取出id属性自增的值
	 -->
	<!-- <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
		编写查询主键的sql语句
		select employees_seq.nextval from dual
	</selectKey> -->
	<selectKey keyProperty="id" order="AFTER" resultType="Integer">
		<!-- 编写查询主键的sql语句 -->
		select employees_seq.currval from dual
	</selectKey>
	<!-- 插入时的主键是从序列中拿到的 -->
		<!-- insert into employee(id,last_name,email) values(#{id},#{lastName},#{email})   -->
		insert into employees(id,last_name,email) values(employees_seq.nextval,#{lastName},#{email});
	</insert>
	
	<!-- public Employee getEmpByIdAndLastName(Integer id, String lastName); -->
	<select id="getEmpByIdAndLastName" resultType="com.atguigu.mybatis.bean.Employee">
		<!-- select * from employee where id=#{param1} and last_name=#{param2} -->
		select * from employee where id=#{id} and last_name=#{lastName}
	</select>
	
	<!-- public void updateEmp(Employee employee); -->
	<update id="updateEmp">
		update employee set last_name=#{lastName},email=#{email},gender=#{gender} where id=#{id}
	</update>
	
	<!-- public void deleteEmpById(Integer id); -->
	<delete id="deleteEmpById">
		delete from employee where id=#{id};
	</delete>
	
	
	
</mapper>