<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.atguigu.mybatis.dao.EmployeeMapperDynamicSQL">
	<!-- if:判断 choose:(when,othersize)分支选择:带了break的switch-case 如果带了id就用id查，如果带了lastName就用lastName查；只会进入其中一个 
		trim(where(封装查询条件),set(封装修改条件)):字符串截取 foreach -->
	<!-- 查询员工，要求，携带了那个字段，查询条件就带上这个字段的值 -->
	<!-- public List<Employee> getEmpsByConditionIf(Employee employee); -->

	<!-- <select id="getEmpsByConditionIf" resultType="com.atguigu.mybatis.bean.Employee"> 
		select * from employee -->

	<!-- where -->
	<!-- <where> -->
	<!-- test:判断表达式(OGNL) c:if test 从参数中取值进行判断 遇见特殊符号应该去写转义字符 -->

	<!-- <if test="id!=null"> id=#{id} </if> <if test="lastName!=null &amp;&amp; 
		lastName!=&quot;&quot;" > and last_name like #{lastName} </if> <if test="email!=null 
		and email.trim()!=&quot;&quot;"> and email=#{email} </if> -->

	<!-- ognl会进行字符串和数字之间的转换 -->
	<!-- <if test="gender==&quot;f&quot; or gender==&quot;m&quot;"> gender=#{gender} 
		</if> </where> </select> -->

	<!-- public List<Employee> getEmpsByConditionIf(Employee employee); -->
	<select id="getEmpsByConditionIf"
		resultType="com.atguigu.mybatis.bean.Employee">
		select * from employee
		<!-- 后面多出的and或者or where不能解决 -->
		<!-- prefix="":前缀;trim标签体中是整个字符拼串后的结果 prefix给拼串后的整个字符串加一个前缀 prefixOverrides="" 
			前缀覆盖：去掉整个字符串前面多余的字符 suffix="" 后缀 suffix给拼串后的整个字符串加一个后缀 suffixOverrides="" 
			后缀覆盖：去掉整个字符串后面多余的字符 -->
		<trim prefix="where" suffixOverrides="and">
			<if test="id!=null">
				id=#{id} and
			</if>
			<if test="lastName!=null &amp;&amp; lastName!=&quot;&quot;">
				last_name like #{lastName} and
			</if>
			<if test="email!=null and email.trim()!=&quot;&quot;">
				email=#{email} and
			</if>
			<!-- ognl会进行字符串和数字之间的转换 -->
			<if test="gender==&quot;f&quot; or gender==&quot;m&quot;">
				gender=#{gender}
			</if>
		</trim>
	</select>
	<!-- public List<Employee> getEmpByConditionChoose(Employee employee); -->
	<select id="getEmpByConditionChoose"
		resultType="com.atguigu.mybatis.bean.Employee">
		select id,last_name lastName,gender,email from employee
		<where>
			<!-- 如果带了id就用id查，如果带了lastName就用lastName查；只会进入其中一个 -->
			<choose>
				<when test="id!=null">
					id = #{id}
				</when>
				<when test="lastName!=null">
					last_name like #{lastName}
				</when>
				<when test="email!=null">
					email = #{email}
				</when>
				<otherwise>
					gender = 'f'
				</otherwise>
			</choose>
		</where>
	</select>
	<!-- public void updateEmp(Employee emp); -->
	<update id="updateEmp">
		update employee
		<!-- set <if test="lastName!=null"> last_name=#{lastName}, </if> <if test="email!=null"> 
			email=#{email}, </if> <if test="gender!=null"> gender=#{gender} </if> where 
			id = #{id} -->
		<!--推荐使用: set标签表示 <set> <if test="lastName!=null"> last_name=#{lastName} 
			</if> <if test="email!=null"> email=#{email} </if> <if test="gender!=null"> 
			gender=#{gender} </if> </set> where id = #{id} -->
		<!-- 利用trim进行拼串 <trim prefix="set" suffixOverrides="," suffix="where id 
			= #{id}"> <if test="lastName!=null"> last_name=#{lastName}, </if> <if test="email!=null"> 
			email=#{email}, </if> <if test="gender!=null"> gender=#{gender} </if> </trim> -->
	</update>
	<select id="getEmpsByConditionForeach"
		resultType="com.atguigu.mybatis.bean.Employee">
		select * from employee where id in
		<!-- collection:指定要遍历的集合 list类型的参数会特殊处理封装在map中,map的key就叫list item:将当前遍历出的元素赋值给指定的变量 
			#{变量名}就能取出变量的值，也就是当前遍历出的元素 separator:每个元素之间的分隔符 open:遍历出所有结果拼接一个开始的字符 close:遍历出的所有结果拼接一个结束的字符 
			index:索引，遍历list的时候index就是索引，item就是值 遍历map的时候index表示的就是map的key，item就是map的值 -->
		<foreach collection="ids" item="item_id" separator=","
			open="(" close=")">
			#{item_id}
		</foreach>
	</select>

	<!-- 批量保存 -->
	<!-- MYSQL下批量保存，可以foreach遍历 mysql支持values(),(),()语法 -->
	<!-- public void addEmps(@Param("emps")List<Employee> emps); -->
	<!-- <insert id="addEmps"> insert into employee(last_name,email,gender,d_id) 
		values <foreach collection="emps" item="emp" separator=","> (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id}) 
		</foreach> </insert> -->
	<!-- 这种方式需要数据库连接属性allowMultiQueries=true 这种分号分隔多个sql可以用于其它的批量操作(删除，修改) -->
	<insert id="addEmps">
		<foreach collection="emps" item="emp" separator=";">
			insert into employee(last_name,email,gender)
			values(#{emp.lastName},#{emp.email},#{emp.gender})
		</foreach>
	</insert>
	<!-- Oracle数据库批量保存:
		Oracle不支持values(),(),()
	 -->
	 <insert id="addEmps" databaseId="oracle">
	 	<!--  -->
	 </insert>
	 
	 <!-- 两个内置参数
	 	不只是方法传递过来的参数可以被用来判断
	 	mybatis默认还有两个内置参数:
	 	_parameter:代表整个参数
	 		单个参数:_parameter就是这个参数
	 		多个参数:参数会被封装为一个map;_parameter就是代表这个map
	 	_databaseId:如果配置了databaseIdProvider标签，
	 		_databaseId就是代表当前数据库的别名oracle
	  -->
	  <!-- public List<Employee> getEmpsTestInnerParameter(Employee employee); -->
	  <select id="getEmpsTestInnerParameter" resultType="com.atguigu.mybatis.bean.Employee">
	  		<!-- bind：可以将一个OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值 -->
	  		<bind name="_lastName" value="'%'+lastName+'%'"/>	
	  		<!-- <if test="_databaseId=='mysql'"> -->
		  		<!-- select * from employee
				<if test="_parameter!=null"> _parameter就是表示Employee的这个类
					where last_name = #{_parameter.lastName}
				</if> -->
				<!-- 引用外部定义的sql -->
				<include refid="insertColumn">
					<property name="testColumn" value="abc"/>
				</include>
				<if test="_parameter!=null">
					where last_name like #{_lastName}
				</if>
	  		<!-- </if>
	  		<if test="_databaseId=='oracle'">
	  			select * from emp
	  		</if> -->
	  </select>
	  <!-- 
	  	抽取可重用的sql片段，方便后面引用
	  	1、sql用来抽取：经常将要查询的列名，或者插入的列名抽取出来方便引用
	  	2、include来引用已经抽取的sql;
	  	3、include还可以自定义一些property,sql标签内部就能使用自定义的属性
	  		取值的正确方法：用法${prop}
	  		#{不能使用这种方式}
	  	 -->
	  <sql id="insertColumn">
	  		select * from employee
	  </sql>
</mapper>